/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.example.exloprer;

import java.awt.BorderLayout;
import javax.swing.ActionMap;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.TreeTableView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.netbeans.example.exloprer//FileExplorer//EN",
autostore = false)
@TopComponent.Description(preferredID = "FileExplorerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.netbeans.example.exloprer.FileExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_FileExplorerAction",
preferredID = "FileExplorerTopComponent")
public final class FileExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    TreeTableView view = new TreeTableView();
    ExplorerManager manager = new ExplorerManager();
    
    public FileExplorerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(FileExplorerTopComponent.class, "CTL_FileExplorerTopComponent"));
        setToolTipText(NbBundle.getMessage(FileExplorerTopComponent.class, "HINT_FileExplorerTopComponent"));
        this.add(view, BorderLayout.CENTER);
        ActionMap map = this.getActionMap();
        this.associateLookup(ExplorerUtils.createLookup(manager, map));
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        try {
            FileObject sfs = FileUtil.getConfigRoot();
            Node node = DataObject.find(sfs).getNodeDelegate();
            Children children = new Children.Array();
            children.add(new BeanClassNode[]{new BeanClassNode(new Bean(), "1"), new BeanClassNode(new Bean(), "2"), new BeanClassNode(new Bean(), "3")});
            manager.setRootContext(new AbstractNode(children));
//            manager.setRootContext(node);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
        
    }
    
    @Override
    public void componentClosed() {
        manager.setRootContext(Node.EMPTY);
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }
    
    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }
}
