/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbean.sample;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.netbean.sample.palette.ItemData;
import org.netbean.sample.palette.ItemDataNode;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.netbean.sample//MyTop//EN",
autostore = false)
@TopComponent.Description(preferredID = "MyTopTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.netbean.sample.MyTopTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_MyTopAction",
preferredID = "MyTopTopComponent")
public final class MyTopTopComponent extends TopComponent {

    private HashMap<ItemData, ItemDataDisplayer> map = new HashMap<ItemData, ItemDataDisplayer>();

    public MyTopTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(MyTopTopComponent.class, "CTL_MyTopTopComponent"));
        setToolTipText(NbBundle.getMessage(MyTopTopComponent.class, "HINT_MyTopTopComponent"));
        this.associateLookup(Lookups.fixed(PaletteSupport.createController()));
        this.jPanel1.setDropTarget(new DropTarget(this.jPanel1, new DropTargetListener() {

            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                this.dragOver(dtde);
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
                doDragOver(dtde);
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {
                jPanel1.repaint();
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                doDrag(dtde);
                jPanel1.repaint();
            }
        }));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void doDrag(DropTargetDropEvent event) {
        ItemDataDisplayer displayer;
        try {
            if (event.isDataFlavorSupported(ItemDataNode.DATA_FLAVOR)) {
//                event.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                ItemData data = (ItemData) event.getTransferable().getTransferData(ItemDataNode.DATA_FLAVOR);
                if (data != null) {
                    displayer = new ItemDataDisplayer(data);
                    map.put(data, displayer);
                    jPanel1.add(map.get(data));
                    displayer.setSize(displayer.getPreferredSize());
                }
            }
        } catch (UnsupportedFlavorException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void doDragOver(DropTargetDragEvent event) {
        try {
            ItemData data = (ItemData) event.getTransferable().getTransferData(ItemDataNode.DATA_FLAVOR);
            ItemDataDisplayer displayer = new ItemDataDisplayer(data);
            Graphics2D g2d = (Graphics2D) this.jPanel1.getGraphics();
            Rectangle rect = this.jPanel1.getVisibleRect();
            this.jPanel1.paintImmediately(rect.x, rect.y, rect.width, rect.height);
            g2d.drawImage(displayer.getData().getIcon32(), event.getLocation().x, event.getLocation().y, null);
            event.acceptDrag(DnDConstants.ACTION_COPY_OR_MOVE);
        } catch (UnsupportedFlavorException ex) {
            Exceptions.printStackTrace(ex);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    class ItemDataDisplayer extends JLabel {

        private ItemData data;

        ItemDataDisplayer(ItemData data) {
            super("");
            this.data = data;
            this.setIcon(new ImageIcon(data.getIcon32()));
            this.setToolTipText(data.getComment());
        }

        public ItemData getData() {
            return data;
        }
    }
}
